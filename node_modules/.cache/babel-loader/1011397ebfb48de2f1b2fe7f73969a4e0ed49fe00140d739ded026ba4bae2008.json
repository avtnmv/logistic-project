{"ast":null,"code":"import _objectSpread from\"/Users/avtnmv/Documents/Front-End/logistics-project-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";export const TEST_PHONES={'+998901234567':'1234','+998901234568':'5678','+998901234569':'9999','+380635032027':'2027'};const STORAGE_KEY='logistics_app_users';const DEFAULT_USERS={'+998901234567':{id:'user_001',phone:'+998901234567',password:'Test123!',isRegistered:true,firstName:'Алексей',lastName:'Петров'},'+998901234568':{id:'user_002',phone:'+998901234568',password:'Test456!',isRegistered:true,firstName:'Мария',lastName:'Иванова'},'+998901234569':{id:'user_003',phone:'+998901234569',password:'Test789!',isRegistered:true,firstName:'Дмитрий',lastName:'Сидоров'},'+380635032027':{id:'user_004',phone:'+380635032027',password:'Ukraine2027!',isRegistered:true,firstName:'Виктор',lastName:'Кравчук'}};const loadUsersFromStorage=()=>{try{const stored=localStorage.getItem(STORAGE_KEY);if(stored){const parsed=JSON.parse(stored);console.log('📱 Загружены данные пользователей из localStorage:',Object.keys(parsed));return _objectSpread(_objectSpread({},DEFAULT_USERS),parsed);}}catch(error){console.warn('⚠️ Ошибка загрузки данных из localStorage:',error);}return DEFAULT_USERS;};export const saveUsersToStorage=users=>{try{const customUsers={};Object.entries(users).forEach(_ref=>{let[phone,userData]=_ref;if(!DEFAULT_USERS[phone]){customUsers[phone]=userData;}});localStorage.setItem(STORAGE_KEY,JSON.stringify(customUsers));console.log('💾 Данные пользователей сохранены в localStorage:',Object.keys(customUsers));}catch(error){console.warn('⚠️ Ошибка сохранения данных в localStorage:',error);}};let globalTestDB={codes:_objectSpread({},TEST_PHONES),users:loadUsersFromStorage(),lastRequestTime:{},attempts:{}};export const createTestDB=()=>{return globalTestDB;};export const getGlobalTestDB=()=>{return globalTestDB;};export const clearStoredUsers=()=>{try{localStorage.removeItem(STORAGE_KEY);console.log('🗑️ Пользовательские данные удалены из localStorage');}catch(error){console.warn('⚠️ Ошибка очистки localStorage:',error);}};export const resetTestDB=()=>{clearStoredUsers();globalTestDB={codes:_objectSpread({},TEST_PHONES),users:_objectSpread({},DEFAULT_USERS),lastRequestTime:{},attempts:{}};console.log('🔄 База данных сброшена к исходному состоянию');};export const isTestPhone=phone=>{return phone in TEST_PHONES;};export const getTestCode=phone=>{return TEST_PHONES[phone]||null;};export const isUserRegistered=(phone,db)=>{return phone in db.users&&db.users[phone].isRegistered;};export const verifyUserPassword=(phone,password,db)=>{const user=db.users[phone];return user&&user.isRegistered&&user.password===password;};export const registerUser=(phone,password,db,firstName,lastName)=>{db.users[phone]={id:\"user_\".concat(Date.now()),phone,password,isRegistered:true,firstName,lastName};saveUsersToStorage(db.users);console.log(\"\\u2705 \\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \".concat(phone,\" (\").concat(firstName,\" \").concat(lastName,\") \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0437\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0438 \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D \\u0432 localStorage\"));};export const updateUserPassword=(phone,newPassword,db)=>{if(db.users[phone]){db.users[phone].password=newPassword;saveUsersToStorage(db.users);console.log(\"\\u2705 \\u041F\\u0430\\u0440\\u043E\\u043B\\u044C \\u0434\\u043B\\u044F \".concat(phone,\" \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D \\u0438 \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D \\u0432 localStorage\"));}};export const updateUserEmail=(phone,email,db)=>{if(!db.users[phone])return;const normalized=email.trim().toLowerCase();const alreadyUsed=Object.entries(db.users).some(_ref2=>{let[p,user]=_ref2;if(p===phone)return false;return(user.email||'').toLowerCase()===normalized;});if(alreadyUsed){throw new Error('Email already in use');}db.users[phone].email=email;saveUsersToStorage(db.users);console.log(\"\\u2705 E-mail \\u0434\\u043B\\u044F \".concat(phone,\" \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D \\u043D\\u0430 \").concat(email,\" \\u0438 \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D \\u0432 localStorage\"));};export const logTestData=title=>{console.log('');console.log('==================================================');console.log(\"                \".concat(title));console.log('==================================================');console.log('');Object.entries(TEST_PHONES).forEach(_ref3=>{let[phone,code]=_ref3;console.log(\"\\uD83D\\uDCF1 \".concat(phone,\" \\u2192 \\u043A\\u043E\\u0434: \").concat(code));});console.log('');console.log('💡 Используйте эти данные для тестирования');console.log('');};","map":{"version":3,"names":["TEST_PHONES","STORAGE_KEY","DEFAULT_USERS","id","phone","password","isRegistered","firstName","lastName","loadUsersFromStorage","stored","localStorage","getItem","parsed","JSON","parse","console","log","Object","keys","_objectSpread","error","warn","saveUsersToStorage","users","customUsers","entries","forEach","_ref","userData","setItem","stringify","globalTestDB","codes","lastRequestTime","attempts","createTestDB","getGlobalTestDB","clearStoredUsers","removeItem","resetTestDB","isTestPhone","getTestCode","isUserRegistered","db","verifyUserPassword","user","registerUser","concat","Date","now","updateUserPassword","newPassword","updateUserEmail","email","normalized","trim","toLowerCase","alreadyUsed","some","_ref2","p","Error","logTestData","title","_ref3","code"],"sources":["/Users/avtnmv/Documents/Front-End/logistics-project-react/src/data/testData.ts"],"sourcesContent":["export interface TestPhoneData {\n  [phone: string]: string; \n}\n\nexport interface UserData {\n  id: string;\n  phone: string;\n  password: string;\n  isRegistered: boolean;\n  firstName?: string;  \n  lastName?: string;   \n  email?: string;\n}\n\nexport interface TestDB {\n  codes: TestPhoneData;\n  users: { [phone: string]: UserData };\n  lastRequestTime: { [phone: string]: number };\n  attempts: { [phone: string]: number };\n}\n\nexport const TEST_PHONES: TestPhoneData = {\n  '+998901234567': '1234',\n  '+998901234568': '5678',\n  '+998901234569': '9999',\n  '+380635032027': '2027' \n};\n\nconst STORAGE_KEY = 'logistics_app_users';\n\nconst DEFAULT_USERS: { [phone: string]: UserData } = {\n  '+998901234567': {\n    id: 'user_001',\n    phone: '+998901234567',\n    password: 'Test123!',\n    isRegistered: true,\n    firstName: 'Алексей',\n    lastName: 'Петров'\n  },\n  '+998901234568': {\n    id: 'user_002',\n    phone: '+998901234568',\n    password: 'Test456!',\n    isRegistered: true,\n    firstName: 'Мария',\n    lastName: 'Иванова'\n  },\n  '+998901234569': {\n    id: 'user_003',\n    phone: '+998901234569',\n    password: 'Test789!',\n    isRegistered: true,\n    firstName: 'Дмитрий',\n    lastName: 'Сидоров'\n  },\n  '+380635032027': {\n    id: 'user_004',\n    phone: '+380635032027',\n    password: 'Ukraine2027!',\n    isRegistered: true,\n    firstName: 'Виктор',\n    lastName: 'Кравчук'\n  }\n};\n\n\nconst loadUsersFromStorage = (): { [phone: string]: UserData } => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      const parsed = JSON.parse(stored);\n      console.log('📱 Загружены данные пользователей из localStorage:', Object.keys(parsed));\n      return { ...DEFAULT_USERS, ...parsed }; \n    }\n  } catch (error) {\n    console.warn('⚠️ Ошибка загрузки данных из localStorage:', error);\n  }\n  return DEFAULT_USERS;\n};\n\nexport const saveUsersToStorage = (users: { [phone: string]: UserData }): void => {\n  try {\n    const customUsers: { [phone: string]: UserData } = {};\n    Object.entries(users).forEach(([phone, userData]) => {\n      if (!DEFAULT_USERS[phone]) {\n        customUsers[phone] = userData;\n      }\n    });\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(customUsers));\n    console.log('💾 Данные пользователей сохранены в localStorage:', Object.keys(customUsers));\n  } catch (error) {\n    console.warn('⚠️ Ошибка сохранения данных в localStorage:', error);\n  }\n};\n\nlet globalTestDB: TestDB = {\n  codes: { ...TEST_PHONES },\n  users: loadUsersFromStorage(),\n  lastRequestTime: {},\n  attempts: {}\n};\n\nexport const createTestDB = (): TestDB => {\n  return globalTestDB;\n};\n\nexport const getGlobalTestDB = (): TestDB => {\n  return globalTestDB;\n};\n\nexport const clearStoredUsers = (): void => {\n  try {\n    localStorage.removeItem(STORAGE_KEY);\n    console.log('🗑️ Пользовательские данные удалены из localStorage');\n  } catch (error) {\n    console.warn('⚠️ Ошибка очистки localStorage:', error);\n  }\n};\n\nexport const resetTestDB = (): void => {\n  clearStoredUsers();\n  \n  globalTestDB = {\n    codes: { ...TEST_PHONES },\n    users: { ...DEFAULT_USERS }, \n    lastRequestTime: {},\n    attempts: {}\n  };\n  console.log('🔄 База данных сброшена к исходному состоянию');\n};\n\nexport const isTestPhone = (phone: string): boolean => {\n  return phone in TEST_PHONES;\n};\n\nexport const getTestCode = (phone: string): string | null => {\n  return TEST_PHONES[phone] || null;\n};\n\nexport const isUserRegistered = (phone: string, db: TestDB): boolean => {\n  return phone in db.users && db.users[phone].isRegistered;\n};\n\nexport const verifyUserPassword = (phone: string, password: string, db: TestDB): boolean => {\n  const user = db.users[phone];\n  return user && user.isRegistered && user.password === password;\n};\n\n\nexport const registerUser = (phone: string, password: string, db: TestDB, firstName?: string, lastName?: string): void => {\n  db.users[phone] = {\n    id: `user_${Date.now()}`,\n    phone,\n    password,\n    isRegistered: true,\n    firstName,\n    lastName\n  };\n  saveUsersToStorage(db.users);\n  console.log(`✅ Пользователь ${phone} (${firstName} ${lastName}) успешно зарегистрирован и сохранен в localStorage`);\n};\n\nexport const updateUserPassword = (phone: string, newPassword: string, db: TestDB): void => {\n  if (db.users[phone]) {\n    db.users[phone].password = newPassword;\n    saveUsersToStorage(db.users);\n    console.log(`✅ Пароль для ${phone} успешно изменен и сохранен в localStorage`);\n  }\n};\n\nexport const updateUserEmail = (phone: string, email: string, db: TestDB): void => {\n  if (!db.users[phone]) return;\n  const normalized = email.trim().toLowerCase();\n  const alreadyUsed = Object.entries(db.users).some(([p, user]) => {\n    if (p === phone) return false;\n    return (user.email || '').toLowerCase() === normalized;\n  });\n  if (alreadyUsed) {\n    throw new Error('Email already in use');\n  }\n  db.users[phone].email = email;\n  saveUsersToStorage(db.users);\n  console.log(`✅ E-mail для ${phone} обновлен на ${email} и сохранен в localStorage`);\n};\n\nexport const logTestData = (title: string): void => {\n  console.log('');\n  console.log('==================================================');\n  console.log(`                ${title}`);\n  console.log('==================================================');\n  console.log('');\n  Object.entries(TEST_PHONES).forEach(([phone, code]) => {\n    console.log(`📱 ${phone} → код: ${code}`);\n  });\n  console.log('');\n  console.log('💡 Используйте эти данные для тестирования');\n  console.log('');\n};\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}