{"ast":null,"code":"var _VerificationService;\n// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n/**\n * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n */\nexport class VerificationService {\n  // 10 –º–∏–Ω—É—Ç\n\n  constructor() {\n    this.generatedCodes = new Map();\n    this.CODE_EXPIRY_TIME = 10 * 60 * 1000;\n  }\n\n  /**\n   * –ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (Singleton)\n   */\n  static getInstance() {\n    if (!VerificationService.instance) {\n      VerificationService.instance = new VerificationService();\n    }\n    return VerificationService.instance;\n  }\n\n  /**\n   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥\n   */\n  generateVerificationCode() {\n    return Math.floor(1000 + Math.random() * 9000).toString();\n  }\n\n  /**\n   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω\n   */\n  async sendCode(params) {\n    try {\n      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥\n      const code = this.generateVerificationCode();\n\n      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π\n      this.generatedCodes.set(params.phone, {\n        code,\n        timestamp: Date.now()\n      });\n\n      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ SMS\n      return await this.sendSMSCode(params.phone, code, params.userName);\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error);\n      return {\n        success: false,\n        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'\n      };\n    }\n  }\n\n  /**\n   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ SMS (–∏–º–∏—Ç–∞—Ü–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)\n   */\n  async sendSMSCode(phone, code, userName) {\n    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS\n    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS —Å–µ—Ä–≤–∏—Å–æ–º\n\n    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏\n    console.log(`üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`);\n\n    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return {\n      success: true,\n      message: `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}`,\n      code: code // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n    };\n  }\n\n  /**\n   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n   */\n  verifyCode(phone, inputCode) {\n    const storedData = this.generatedCodes.get(phone);\n    if (!storedData) {\n      return {\n        success: false,\n        message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'\n      };\n    }\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞\n    if (Date.now() - storedData.timestamp > this.CODE_EXPIRY_TIME) {\n      this.generatedCodes.delete(phone);\n      return {\n        success: false,\n        message: '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'\n      };\n    }\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞\n    if (storedData.code === inputCode) {\n      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥\n      this.generatedCodes.delete(phone);\n      return {\n        success: true,\n        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!'\n      };\n    } else {\n      return {\n        success: false,\n        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'\n      };\n    }\n  }\n\n  /**\n   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n   */\n  hasActiveCode(phone) {\n    const storedData = this.generatedCodes.get(phone);\n    if (!storedData) return false;\n    return Date.now() - storedData.timestamp <= this.CODE_EXPIRY_TIME;\n  }\n\n  /**\n   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã\n   */\n  cleanupExpiredCodes() {\n    const now = Date.now();\n    this.generatedCodes.forEach((data, phone) => {\n      if (now - data.timestamp > this.CODE_EXPIRY_TIME) {\n        this.generatedCodes.delete(phone);\n      }\n    });\n  }\n\n  /**\n   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤\n   */\n  getActiveCodesCount() {\n    this.cleanupExpiredCodes();\n    return this.generatedCodes.size;\n  }\n\n  /**\n   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)\n   */\n  getCodeForTesting(phone) {\n    const storedData = this.generatedCodes.get(phone);\n    if (storedData && Date.now() - storedData.timestamp <= this.CODE_EXPIRY_TIME) {\n      return storedData.code;\n    }\n    return null;\n  }\n}\n\n// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞\n_VerificationService = VerificationService;\nVerificationService.instance = void 0;\nexport const verificationService = VerificationService.getInstance();","map":{"version":3,"names":["VerificationService","constructor","generatedCodes","Map","CODE_EXPIRY_TIME","getInstance","instance","generateVerificationCode","Math","floor","random","toString","sendCode","params","code","set","phone","timestamp","Date","now","sendSMSCode","userName","error","console","success","message","log","Promise","resolve","setTimeout","verifyCode","inputCode","storedData","get","delete","hasActiveCode","cleanupExpiredCodes","forEach","data","getActiveCodesCount","size","getCodeForTesting","_VerificationService","verificationService"],"sources":["/Users/avtnmv/Documents/Front-End/logistics-project-react/src/services/verificationService.ts"],"sourcesContent":["// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\nexport interface VerificationResult {\n  success: boolean;\n  message: string;\n  code?: string;\n}\n\n// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\nexport interface VerificationParams {\n  phone: string;\n  userName?: string;\n}\n\n/**\n * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n */\nexport class VerificationService {\n  private static instance: VerificationService;\n  private generatedCodes: Map<string, { code: string; timestamp: number }> = new Map();\n  private readonly CODE_EXPIRY_TIME = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç\n\n  private constructor() {}\n\n  /**\n   * –ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (Singleton)\n   */\n  public static getInstance(): VerificationService {\n    if (!VerificationService.instance) {\n      VerificationService.instance = new VerificationService();\n    }\n    return VerificationService.instance;\n  }\n\n  /**\n   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥\n   */\n  private generateVerificationCode(): string {\n    return Math.floor(1000 + Math.random() * 9000).toString();\n  }\n\n  /**\n   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω\n   */\n  public async sendCode(params: VerificationParams): Promise<VerificationResult> {\n    try {\n      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥\n      const code = this.generateVerificationCode();\n      \n      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π\n      this.generatedCodes.set(params.phone, {\n        code,\n        timestamp: Date.now()\n      });\n\n      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ SMS\n      return await this.sendSMSCode(params.phone, code, params.userName);\n\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error);\n      return {\n        success: false,\n        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'\n      };\n    }\n  }\n\n  /**\n   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ SMS (–∏–º–∏—Ç–∞—Ü–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)\n   */\n  private async sendSMSCode(\n    phone: string, \n    code: string, \n    userName?: string\n  ): Promise<VerificationResult> {\n    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS\n    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS —Å–µ—Ä–≤–∏—Å–æ–º\n    \n    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏\n    console.log(`üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`);\n    \n    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return {\n      success: true,\n      message: `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}`,\n      code: code // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n    };\n  }\n\n  /**\n   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n   */\n  public verifyCode(phone: string, inputCode: string): VerificationResult {\n    const storedData = this.generatedCodes.get(phone);\n    \n    if (!storedData) {\n      return {\n        success: false,\n        message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'\n      };\n    }\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞\n    if (Date.now() - storedData.timestamp > this.CODE_EXPIRY_TIME) {\n      this.generatedCodes.delete(phone);\n      return {\n        success: false,\n        message: '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'\n      };\n    }\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞\n    if (storedData.code === inputCode) {\n      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥\n      this.generatedCodes.delete(phone);\n      return {\n        success: true,\n        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!'\n      };\n    } else {\n      return {\n        success: false,\n        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'\n      };\n    }\n  }\n\n  /**\n   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n   */\n  public hasActiveCode(phone: string): boolean {\n    const storedData = this.generatedCodes.get(phone);\n    if (!storedData) return false;\n    \n    return Date.now() - storedData.timestamp <= this.CODE_EXPIRY_TIME;\n  }\n\n  /**\n   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã\n   */\n  public cleanupExpiredCodes(): void {\n    const now = Date.now();\n    this.generatedCodes.forEach((data, phone) => {\n      if (now - data.timestamp > this.CODE_EXPIRY_TIME) {\n        this.generatedCodes.delete(phone);\n      }\n    });\n  }\n\n  /**\n   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤\n   */\n  public getActiveCodesCount(): number {\n    this.cleanupExpiredCodes();\n    return this.generatedCodes.size;\n  }\n\n  /**\n   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)\n   */\n  public getCodeForTesting(phone: string): string | null {\n    const storedData = this.generatedCodes.get(phone);\n    if (storedData && Date.now() - storedData.timestamp <= this.CODE_EXPIRY_TIME) {\n      return storedData.code;\n    }\n    return null;\n  }\n}\n\n// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞\nexport const verificationService = VerificationService.getInstance();\n"],"mappings":";AAAA;;AAOA;;AAMA;AACA;AACA;AACA,OAAO,MAAMA,mBAAmB,CAAC;EAGqB;;EAE5CC,WAAWA,CAAA,EAAG;IAAA,KAHdC,cAAc,GAAqD,IAAIC,GAAG,CAAC,CAAC;IAAA,KACnEC,gBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;EAE3B;;EAEvB;AACF;AACA;EACE,OAAcC,WAAWA,CAAA,EAAwB;IAC/C,IAAI,CAACL,mBAAmB,CAACM,QAAQ,EAAE;MACjCN,mBAAmB,CAACM,QAAQ,GAAG,IAAIN,mBAAmB,CAAC,CAAC;IAC1D;IACA,OAAOA,mBAAmB,CAACM,QAAQ;EACrC;;EAEA;AACF;AACA;EACUC,wBAAwBA,CAAA,EAAW;IACzC,OAAOC,IAAI,CAACC,KAAK,CAAC,IAAI,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC3D;;EAEA;AACF;AACA;EACE,MAAaC,QAAQA,CAACC,MAA0B,EAA+B;IAC7E,IAAI;MACF;MACA,MAAMC,IAAI,GAAG,IAAI,CAACP,wBAAwB,CAAC,CAAC;;MAE5C;MACA,IAAI,CAACL,cAAc,CAACa,GAAG,CAACF,MAAM,CAACG,KAAK,EAAE;QACpCF,IAAI;QACJG,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM,IAAI,CAACC,WAAW,CAACP,MAAM,CAACG,KAAK,EAAEF,IAAI,EAAED,MAAM,CAACQ,QAAQ,CAAC;IAEpE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO;QACLE,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACE,MAAcL,WAAWA,CACvBJ,KAAa,EACbF,IAAY,EACZO,QAAiB,EACY;IAC7B;IACA;;IAEA;IACAE,OAAO,CAACG,GAAG,CAAC,uBAAuBV,KAAK,wBAAwBF,IAAI,EAAE,CAAC;;IAEvE;IACA,MAAM,IAAIa,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEvD,OAAO;MACLJ,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,kCAAkCT,KAAK,EAAE;MAClDF,IAAI,EAAEA,IAAI,CAAC;IACb,CAAC;EACH;;EAEA;AACF;AACA;EACSgB,UAAUA,CAACd,KAAa,EAAEe,SAAiB,EAAsB;IACtE,MAAMC,UAAU,GAAG,IAAI,CAAC9B,cAAc,CAAC+B,GAAG,CAACjB,KAAK,CAAC;IAEjD,IAAI,CAACgB,UAAU,EAAE;MACf,OAAO;QACLR,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAIP,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGa,UAAU,CAACf,SAAS,GAAG,IAAI,CAACb,gBAAgB,EAAE;MAC7D,IAAI,CAACF,cAAc,CAACgC,MAAM,CAAClB,KAAK,CAAC;MACjC,OAAO;QACLQ,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAIO,UAAU,CAAClB,IAAI,KAAKiB,SAAS,EAAE;MACjC;MACA,IAAI,CAAC7B,cAAc,CAACgC,MAAM,CAAClB,KAAK,CAAC;MACjC,OAAO;QACLQ,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;MACX,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACLD,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACSU,aAAaA,CAACnB,KAAa,EAAW;IAC3C,MAAMgB,UAAU,GAAG,IAAI,CAAC9B,cAAc,CAAC+B,GAAG,CAACjB,KAAK,CAAC;IACjD,IAAI,CAACgB,UAAU,EAAE,OAAO,KAAK;IAE7B,OAAOd,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGa,UAAU,CAACf,SAAS,IAAI,IAAI,CAACb,gBAAgB;EACnE;;EAEA;AACF;AACA;EACSgC,mBAAmBA,CAAA,EAAS;IACjC,MAAMjB,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;IACtB,IAAI,CAACjB,cAAc,CAACmC,OAAO,CAAC,CAACC,IAAI,EAAEtB,KAAK,KAAK;MAC3C,IAAIG,GAAG,GAAGmB,IAAI,CAACrB,SAAS,GAAG,IAAI,CAACb,gBAAgB,EAAE;QAChD,IAAI,CAACF,cAAc,CAACgC,MAAM,CAAClB,KAAK,CAAC;MACnC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACSuB,mBAAmBA,CAAA,EAAW;IACnC,IAAI,CAACH,mBAAmB,CAAC,CAAC;IAC1B,OAAO,IAAI,CAAClC,cAAc,CAACsC,IAAI;EACjC;;EAEA;AACF;AACA;EACSC,iBAAiBA,CAACzB,KAAa,EAAiB;IACrD,MAAMgB,UAAU,GAAG,IAAI,CAAC9B,cAAc,CAAC+B,GAAG,CAACjB,KAAK,CAAC;IACjD,IAAIgB,UAAU,IAAId,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGa,UAAU,CAACf,SAAS,IAAI,IAAI,CAACb,gBAAgB,EAAE;MAC5E,OAAO4B,UAAU,CAAClB,IAAI;IACxB;IACA,OAAO,IAAI;EACb;AACF;;AAEA;AAAA4B,oBAAA,GA1Ja1C,mBAAmB;AAAnBA,mBAAmB,CACfM,QAAQ;AA0JzB,OAAO,MAAMqC,mBAAmB,GAAG3C,mBAAmB,CAACK,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}