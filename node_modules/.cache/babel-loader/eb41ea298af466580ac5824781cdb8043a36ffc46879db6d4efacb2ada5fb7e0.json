{"ast":null,"code":"export const TEST_PHONES = {\n  '+998901234567': '1234',\n  '+998901234568': '5678',\n  '+998901234569': '9999',\n  '+380635032027': '2027'\n};\nconst STORAGE_KEY = 'logistics_app_users';\nconst DEFAULT_USERS = {\n  '+998901234567': {\n    id: 'user_001',\n    phone: '+998901234567',\n    password: 'Test123!',\n    isRegistered: true,\n    firstName: 'Алексей',\n    lastName: 'Петров'\n  },\n  '+998901234568': {\n    id: 'user_002',\n    phone: '+998901234568',\n    password: 'Test456!',\n    isRegistered: true,\n    firstName: 'Мария',\n    lastName: 'Иванова'\n  },\n  '+998901234569': {\n    id: 'user_003',\n    phone: '+998901234569',\n    password: 'Test789!',\n    isRegistered: true,\n    firstName: 'Дмитрий',\n    lastName: 'Сидоров'\n  },\n  '+380635032027': {\n    id: 'user_004',\n    phone: '+380635032027',\n    password: 'Ukraine2027!',\n    isRegistered: true,\n    firstName: 'Виктор',\n    lastName: 'Кравчук'\n  }\n};\nconst loadUsersFromStorage = () => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      const parsed = JSON.parse(stored);\n      console.log('📱 Загружены данные пользователей из localStorage:', Object.keys(parsed));\n      return {\n        ...DEFAULT_USERS,\n        ...parsed\n      };\n    }\n  } catch (error) {\n    console.warn('⚠️ Ошибка загрузки данных из localStorage:', error);\n  }\n  return DEFAULT_USERS;\n};\nexport const saveUsersToStorage = users => {\n  try {\n    const customUsers = {};\n    Object.entries(users).forEach(([phone, userData]) => {\n      if (!DEFAULT_USERS[phone]) {\n        customUsers[phone] = userData;\n      }\n    });\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(customUsers));\n    console.log('💾 Данные пользователей сохранены в localStorage:', Object.keys(customUsers));\n  } catch (error) {\n    console.warn('⚠️ Ошибка сохранения данных в localStorage:', error);\n  }\n};\nexport const updateUserInDB = (phone, userData) => {\n  try {\n    // Обновляем в глобальной базе данных\n    globalTestDB.users[phone] = userData;\n\n    // Сохраняем в localStorage\n    saveUsersToStorage(globalTestDB.users);\n    console.log('👤 Пользователь обновлен в базе данных:', phone);\n  } catch (error) {\n    console.warn('⚠️ Ошибка обновления пользователя:', error);\n  }\n};\nexport const logoutUser = () => {\n  try {\n    // Очищаем текущую сессию пользователя\n    localStorage.removeItem('currentUser');\n    console.log('👋 Пользователь вышел из системы');\n  } catch (error) {\n    console.warn('⚠️ Ошибка при выходе из системы:', error);\n  }\n};\nexport const clearAllUserData = () => {\n  try {\n    // Очищаем все данные пользователей\n    localStorage.removeItem(STORAGE_KEY);\n    localStorage.removeItem('currentUser');\n\n    // Очищаем все верификации\n    localStorage.removeItem('document_verification_data');\n\n    // Очищаем все грузы и транспорты\n    localStorage.removeItem('transportCards');\n\n    // Очищаем все пользовательские верификации\n    const keys = Object.keys(localStorage);\n    keys.forEach(key => {\n      if (key.startsWith('document_verification_') || key.startsWith('transportCards_')) {\n        localStorage.removeItem(key);\n      }\n    });\n\n    // Сбрасываем глобальную базу данных\n    globalTestDB = {\n      codes: {\n        ...TEST_PHONES\n      },\n      users: {\n        ...DEFAULT_USERS\n      },\n      lastRequestTime: {},\n      attempts: {}\n    };\n    console.log('🧹 Все данные пользователей очищены! Можете регистрироваться заново.');\n  } catch (error) {\n    console.warn('⚠️ Ошибка при очистке данных:', error);\n  }\n};\nlet globalTestDB = {\n  codes: {\n    ...TEST_PHONES\n  },\n  users: loadUsersFromStorage(),\n  lastRequestTime: {},\n  attempts: {}\n};\nexport const createTestDB = () => {\n  return globalTestDB;\n};\nexport const getGlobalTestDB = () => {\n  return globalTestDB;\n};\nexport const clearStoredUsers = () => {\n  try {\n    localStorage.removeItem(STORAGE_KEY);\n    console.log('🗑️ Пользовательские данные удалены из localStorage');\n  } catch (error) {\n    console.warn('⚠️ Ошибка очистки localStorage:', error);\n  }\n};\nexport const resetTestDB = () => {\n  clearStoredUsers();\n  globalTestDB = {\n    codes: {\n      ...TEST_PHONES\n    },\n    users: {\n      ...DEFAULT_USERS\n    },\n    lastRequestTime: {},\n    attempts: {}\n  };\n  console.log('🔄 База данных сброшена к исходному состоянию');\n};\nexport const isTestPhone = phone => {\n  return phone in TEST_PHONES;\n};\nexport const getTestCode = phone => {\n  return TEST_PHONES[phone] || null;\n};\nexport const isUserRegistered = (phone, db) => {\n  return phone in db.users && db.users[phone].isRegistered;\n};\nexport const verifyUserPassword = (phone, password, db) => {\n  const user = db.users[phone];\n  return user && user.isRegistered && user.password === password;\n};\nexport const registerUser = (phone, password, db, firstName, lastName) => {\n  db.users[phone] = {\n    id: `user_${Date.now()}`,\n    phone,\n    password,\n    isRegistered: true,\n    firstName,\n    lastName\n  };\n  saveUsersToStorage(db.users);\n  console.log(`✅ Пользователь ${phone} (${firstName} ${lastName}) успешно зарегистрирован и сохранен в localStorage`);\n};\nexport const updateUserPassword = (phone, newPassword, db) => {\n  if (db.users[phone]) {\n    db.users[phone].password = newPassword;\n    saveUsersToStorage(db.users);\n    console.log(`✅ Пароль для ${phone} успешно изменен и сохранен в localStorage`);\n  }\n};\nexport const updateUserEmail = (phone, email, db) => {\n  if (!db.users[phone]) return;\n  const normalized = email.trim().toLowerCase();\n  const alreadyUsed = Object.entries(db.users).some(([p, user]) => {\n    if (p === phone) return false;\n    return (user.email || '').toLowerCase() === normalized;\n  });\n  if (alreadyUsed) {\n    throw new Error('Email already in use');\n  }\n  db.users[phone].email = email;\n  saveUsersToStorage(db.users);\n  console.log(`✅ E-mail для ${phone} обновлен на ${email} и сохранен в localStorage`);\n};\nexport const logTestData = title => {\n  console.log('');\n  console.log('==================================================');\n  console.log(`                ${title}`);\n  console.log('==================================================');\n  console.log('');\n  Object.entries(TEST_PHONES).forEach(([phone, code]) => {\n    console.log(`📱 ${phone} → код: ${code}`);\n  });\n  console.log('');\n  console.log('💡 Используйте эти данные для тестирования');\n  console.log('');\n};","map":{"version":3,"names":["TEST_PHONES","STORAGE_KEY","DEFAULT_USERS","id","phone","password","isRegistered","firstName","lastName","loadUsersFromStorage","stored","localStorage","getItem","parsed","JSON","parse","console","log","Object","keys","error","warn","saveUsersToStorage","users","customUsers","entries","forEach","userData","setItem","stringify","updateUserInDB","globalTestDB","logoutUser","removeItem","clearAllUserData","key","startsWith","codes","lastRequestTime","attempts","createTestDB","getGlobalTestDB","clearStoredUsers","resetTestDB","isTestPhone","getTestCode","isUserRegistered","db","verifyUserPassword","user","registerUser","Date","now","updateUserPassword","newPassword","updateUserEmail","email","normalized","trim","toLowerCase","alreadyUsed","some","p","Error","logTestData","title","code"],"sources":["/Users/avtnmv/Documents/Front-End/logistics-project-react — копия/src/data/testData.ts"],"sourcesContent":["export interface TestPhoneData {\n  [phone: string]: string; \n}\n\nexport interface UserData {\n  id: string;\n  phone: string;\n  password: string;\n  isRegistered: boolean;\n  firstName?: string;  \n  lastName?: string;   \n  email?: string;\n}\n\nexport interface TestDB {\n  codes: TestPhoneData;\n  users: { [phone: string]: UserData };\n  lastRequestTime: { [phone: string]: number };\n  attempts: { [phone: string]: number };\n}\n\nexport const TEST_PHONES: TestPhoneData = {\n  '+998901234567': '1234',\n  '+998901234568': '5678',\n  '+998901234569': '9999',\n  '+380635032027': '2027' \n};\n\nconst STORAGE_KEY = 'logistics_app_users';\n\nconst DEFAULT_USERS: { [phone: string]: UserData } = {\n  '+998901234567': {\n    id: 'user_001',\n    phone: '+998901234567',\n    password: 'Test123!',\n    isRegistered: true,\n    firstName: 'Алексей',\n    lastName: 'Петров'\n  },\n  '+998901234568': {\n    id: 'user_002',\n    phone: '+998901234568',\n    password: 'Test456!',\n    isRegistered: true,\n    firstName: 'Мария',\n    lastName: 'Иванова'\n  },\n  '+998901234569': {\n    id: 'user_003',\n    phone: '+998901234569',\n    password: 'Test789!',\n    isRegistered: true,\n    firstName: 'Дмитрий',\n    lastName: 'Сидоров'\n  },\n  '+380635032027': {\n    id: 'user_004',\n    phone: '+380635032027',\n    password: 'Ukraine2027!',\n    isRegistered: true,\n    firstName: 'Виктор',\n    lastName: 'Кравчук'\n  }\n};\n\n\nconst loadUsersFromStorage = (): { [phone: string]: UserData } => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      const parsed = JSON.parse(stored);\n      console.log('📱 Загружены данные пользователей из localStorage:', Object.keys(parsed));\n      return { ...DEFAULT_USERS, ...parsed }; \n    }\n  } catch (error) {\n    console.warn('⚠️ Ошибка загрузки данных из localStorage:', error);\n  }\n  return DEFAULT_USERS;\n};\n\nexport const saveUsersToStorage = (users: { [phone: string]: UserData }): void => {\n  try {\n    const customUsers: { [phone: string]: UserData } = {};\n    Object.entries(users).forEach(([phone, userData]) => {\n      if (!DEFAULT_USERS[phone]) {\n        customUsers[phone] = userData;\n      }\n    });\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(customUsers));\n    console.log('💾 Данные пользователей сохранены в localStorage:', Object.keys(customUsers));\n  } catch (error) {\n    console.warn('⚠️ Ошибка сохранения данных в localStorage:', error);\n  }\n};\n\nexport const updateUserInDB = (phone: string, userData: UserData): void => {\n  try {\n    // Обновляем в глобальной базе данных\n    globalTestDB.users[phone] = userData;\n    \n    // Сохраняем в localStorage\n    saveUsersToStorage(globalTestDB.users);\n    \n    console.log('👤 Пользователь обновлен в базе данных:', phone);\n  } catch (error) {\n    console.warn('⚠️ Ошибка обновления пользователя:', error);\n  }\n};\n\nexport const logoutUser = (): void => {\n  try {\n    // Очищаем текущую сессию пользователя\n    localStorage.removeItem('currentUser');\n    console.log('👋 Пользователь вышел из системы');\n  } catch (error) {\n    console.warn('⚠️ Ошибка при выходе из системы:', error);\n  }\n};\n\nexport const clearAllUserData = (): void => {\n  try {\n    // Очищаем все данные пользователей\n    localStorage.removeItem(STORAGE_KEY);\n    localStorage.removeItem('currentUser');\n    \n    // Очищаем все верификации\n    localStorage.removeItem('document_verification_data');\n    \n    // Очищаем все грузы и транспорты\n    localStorage.removeItem('transportCards');\n    \n    // Очищаем все пользовательские верификации\n    const keys = Object.keys(localStorage);\n    keys.forEach(key => {\n      if (key.startsWith('document_verification_') || key.startsWith('transportCards_')) {\n        localStorage.removeItem(key);\n      }\n    });\n    \n    // Сбрасываем глобальную базу данных\n    globalTestDB = {\n      codes: { ...TEST_PHONES },\n      users: { ...DEFAULT_USERS }, \n      lastRequestTime: {},\n      attempts: {}\n    };\n    \n    console.log('🧹 Все данные пользователей очищены! Можете регистрироваться заново.');\n  } catch (error) {\n    console.warn('⚠️ Ошибка при очистке данных:', error);\n  }\n};\n\nlet globalTestDB: TestDB = {\n  codes: { ...TEST_PHONES },\n  users: loadUsersFromStorage(),\n  lastRequestTime: {},\n  attempts: {}\n};\n\nexport const createTestDB = (): TestDB => {\n  return globalTestDB;\n};\n\nexport const getGlobalTestDB = (): TestDB => {\n  return globalTestDB;\n};\n\nexport const clearStoredUsers = (): void => {\n  try {\n    localStorage.removeItem(STORAGE_KEY);\n    console.log('🗑️ Пользовательские данные удалены из localStorage');\n  } catch (error) {\n    console.warn('⚠️ Ошибка очистки localStorage:', error);\n  }\n};\n\nexport const resetTestDB = (): void => {\n  clearStoredUsers();\n  \n  globalTestDB = {\n    codes: { ...TEST_PHONES },\n    users: { ...DEFAULT_USERS }, \n    lastRequestTime: {},\n    attempts: {}\n  };\n  console.log('🔄 База данных сброшена к исходному состоянию');\n};\n\nexport const isTestPhone = (phone: string): boolean => {\n  return phone in TEST_PHONES;\n};\n\nexport const getTestCode = (phone: string): string | null => {\n  return TEST_PHONES[phone] || null;\n};\n\nexport const isUserRegistered = (phone: string, db: TestDB): boolean => {\n  return phone in db.users && db.users[phone].isRegistered;\n};\n\nexport const verifyUserPassword = (phone: string, password: string, db: TestDB): boolean => {\n  const user = db.users[phone];\n  return user && user.isRegistered && user.password === password;\n};\n\n\nexport const registerUser = (phone: string, password: string, db: TestDB, firstName?: string, lastName?: string): void => {\n  db.users[phone] = {\n    id: `user_${Date.now()}`,\n    phone,\n    password,\n    isRegistered: true,\n    firstName,\n    lastName\n  };\n  saveUsersToStorage(db.users);\n  console.log(`✅ Пользователь ${phone} (${firstName} ${lastName}) успешно зарегистрирован и сохранен в localStorage`);\n};\n\nexport const updateUserPassword = (phone: string, newPassword: string, db: TestDB): void => {\n  if (db.users[phone]) {\n    db.users[phone].password = newPassword;\n    saveUsersToStorage(db.users);\n    console.log(`✅ Пароль для ${phone} успешно изменен и сохранен в localStorage`);\n  }\n};\n\nexport const updateUserEmail = (phone: string, email: string, db: TestDB): void => {\n  if (!db.users[phone]) return;\n  const normalized = email.trim().toLowerCase();\n  const alreadyUsed = Object.entries(db.users).some(([p, user]) => {\n    if (p === phone) return false;\n    return (user.email || '').toLowerCase() === normalized;\n  });\n  if (alreadyUsed) {\n    throw new Error('Email already in use');\n  }\n  db.users[phone].email = email;\n  saveUsersToStorage(db.users);\n  console.log(`✅ E-mail для ${phone} обновлен на ${email} и сохранен в localStorage`);\n};\n\nexport const logTestData = (title: string): void => {\n  console.log('');\n  console.log('==================================================');\n  console.log(`                ${title}`);\n  console.log('==================================================');\n  console.log('');\n  Object.entries(TEST_PHONES).forEach(([phone, code]) => {\n    console.log(`📱 ${phone} → код: ${code}`);\n  });\n  console.log('');\n  console.log('💡 Используйте эти данные для тестирования');\n  console.log('');\n};\n\n\n"],"mappings":"AAqBA,OAAO,MAAMA,WAA0B,GAAG;EACxC,eAAe,EAAE,MAAM;EACvB,eAAe,EAAE,MAAM;EACvB,eAAe,EAAE,MAAM;EACvB,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,WAAW,GAAG,qBAAqB;AAEzC,MAAMC,aAA4C,GAAG;EACnD,eAAe,EAAE;IACfC,EAAE,EAAE,UAAU;IACdC,KAAK,EAAE,eAAe;IACtBC,QAAQ,EAAE,UAAU;IACpBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE,SAAS;IACpBC,QAAQ,EAAE;EACZ,CAAC;EACD,eAAe,EAAE;IACfL,EAAE,EAAE,UAAU;IACdC,KAAK,EAAE,eAAe;IACtBC,QAAQ,EAAE,UAAU;IACpBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE,OAAO;IAClBC,QAAQ,EAAE;EACZ,CAAC;EACD,eAAe,EAAE;IACfL,EAAE,EAAE,UAAU;IACdC,KAAK,EAAE,eAAe;IACtBC,QAAQ,EAAE,UAAU;IACpBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE,SAAS;IACpBC,QAAQ,EAAE;EACZ,CAAC;EACD,eAAe,EAAE;IACfL,EAAE,EAAE,UAAU;IACdC,KAAK,EAAE,eAAe;IACtBC,QAAQ,EAAE,cAAc;IACxBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE,QAAQ;IACnBC,QAAQ,EAAE;EACZ;AACF,CAAC;AAGD,MAAMC,oBAAoB,GAAGA,CAAA,KAAqC;EAChE,IAAI;IACF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAACX,WAAW,CAAC;IAChD,IAAIS,MAAM,EAAE;MACV,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,MAAM,CAAC;MACjCM,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEC,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAAC;MACtF,OAAO;QAAE,GAAGX,aAAa;QAAE,GAAGW;MAAO,CAAC;IACxC;EACF,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdJ,OAAO,CAACK,IAAI,CAAC,4CAA4C,EAAED,KAAK,CAAC;EACnE;EACA,OAAOlB,aAAa;AACtB,CAAC;AAED,OAAO,MAAMoB,kBAAkB,GAAIC,KAAoC,IAAW;EAChF,IAAI;IACF,MAAMC,WAA0C,GAAG,CAAC,CAAC;IACrDN,MAAM,CAACO,OAAO,CAACF,KAAK,CAAC,CAACG,OAAO,CAAC,CAAC,CAACtB,KAAK,EAAEuB,QAAQ,CAAC,KAAK;MACnD,IAAI,CAACzB,aAAa,CAACE,KAAK,CAAC,EAAE;QACzBoB,WAAW,CAACpB,KAAK,CAAC,GAAGuB,QAAQ;MAC/B;IACF,CAAC,CAAC;IACFhB,YAAY,CAACiB,OAAO,CAAC3B,WAAW,EAAEa,IAAI,CAACe,SAAS,CAACL,WAAW,CAAC,CAAC;IAC9DR,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEC,MAAM,CAACC,IAAI,CAACK,WAAW,CAAC,CAAC;EAC5F,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdJ,OAAO,CAACK,IAAI,CAAC,6CAA6C,EAAED,KAAK,CAAC;EACpE;AACF,CAAC;AAED,OAAO,MAAMU,cAAc,GAAGA,CAAC1B,KAAa,EAAEuB,QAAkB,KAAW;EACzE,IAAI;IACF;IACAI,YAAY,CAACR,KAAK,CAACnB,KAAK,CAAC,GAAGuB,QAAQ;;IAEpC;IACAL,kBAAkB,CAACS,YAAY,CAACR,KAAK,CAAC;IAEtCP,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEb,KAAK,CAAC;EAC/D,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdJ,OAAO,CAACK,IAAI,CAAC,oCAAoC,EAAED,KAAK,CAAC;EAC3D;AACF,CAAC;AAED,OAAO,MAAMY,UAAU,GAAGA,CAAA,KAAY;EACpC,IAAI;IACF;IACArB,YAAY,CAACsB,UAAU,CAAC,aAAa,CAAC;IACtCjB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EACjD,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdJ,OAAO,CAACK,IAAI,CAAC,kCAAkC,EAAED,KAAK,CAAC;EACzD;AACF,CAAC;AAED,OAAO,MAAMc,gBAAgB,GAAGA,CAAA,KAAY;EAC1C,IAAI;IACF;IACAvB,YAAY,CAACsB,UAAU,CAAChC,WAAW,CAAC;IACpCU,YAAY,CAACsB,UAAU,CAAC,aAAa,CAAC;;IAEtC;IACAtB,YAAY,CAACsB,UAAU,CAAC,4BAA4B,CAAC;;IAErD;IACAtB,YAAY,CAACsB,UAAU,CAAC,gBAAgB,CAAC;;IAEzC;IACA,MAAMd,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACR,YAAY,CAAC;IACtCQ,IAAI,CAACO,OAAO,CAACS,GAAG,IAAI;MAClB,IAAIA,GAAG,CAACC,UAAU,CAAC,wBAAwB,CAAC,IAAID,GAAG,CAACC,UAAU,CAAC,iBAAiB,CAAC,EAAE;QACjFzB,YAAY,CAACsB,UAAU,CAACE,GAAG,CAAC;MAC9B;IACF,CAAC,CAAC;;IAEF;IACAJ,YAAY,GAAG;MACbM,KAAK,EAAE;QAAE,GAAGrC;MAAY,CAAC;MACzBuB,KAAK,EAAE;QAAE,GAAGrB;MAAc,CAAC;MAC3BoC,eAAe,EAAE,CAAC,CAAC;MACnBC,QAAQ,EAAE,CAAC;IACb,CAAC;IAEDvB,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC;EACrF,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdJ,OAAO,CAACK,IAAI,CAAC,+BAA+B,EAAED,KAAK,CAAC;EACtD;AACF,CAAC;AAED,IAAIW,YAAoB,GAAG;EACzBM,KAAK,EAAE;IAAE,GAAGrC;EAAY,CAAC;EACzBuB,KAAK,EAAEd,oBAAoB,CAAC,CAAC;EAC7B6B,eAAe,EAAE,CAAC,CAAC;EACnBC,QAAQ,EAAE,CAAC;AACb,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAc;EACxC,OAAOT,YAAY;AACrB,CAAC;AAED,OAAO,MAAMU,eAAe,GAAGA,CAAA,KAAc;EAC3C,OAAOV,YAAY;AACrB,CAAC;AAED,OAAO,MAAMW,gBAAgB,GAAGA,CAAA,KAAY;EAC1C,IAAI;IACF/B,YAAY,CAACsB,UAAU,CAAChC,WAAW,CAAC;IACpCe,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;EACpE,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdJ,OAAO,CAACK,IAAI,CAAC,iCAAiC,EAAED,KAAK,CAAC;EACxD;AACF,CAAC;AAED,OAAO,MAAMuB,WAAW,GAAGA,CAAA,KAAY;EACrCD,gBAAgB,CAAC,CAAC;EAElBX,YAAY,GAAG;IACbM,KAAK,EAAE;MAAE,GAAGrC;IAAY,CAAC;IACzBuB,KAAK,EAAE;MAAE,GAAGrB;IAAc,CAAC;IAC3BoC,eAAe,EAAE,CAAC,CAAC;IACnBC,QAAQ,EAAE,CAAC;EACb,CAAC;EACDvB,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;AAC9D,CAAC;AAED,OAAO,MAAM2B,WAAW,GAAIxC,KAAa,IAAc;EACrD,OAAOA,KAAK,IAAIJ,WAAW;AAC7B,CAAC;AAED,OAAO,MAAM6C,WAAW,GAAIzC,KAAa,IAAoB;EAC3D,OAAOJ,WAAW,CAACI,KAAK,CAAC,IAAI,IAAI;AACnC,CAAC;AAED,OAAO,MAAM0C,gBAAgB,GAAGA,CAAC1C,KAAa,EAAE2C,EAAU,KAAc;EACtE,OAAO3C,KAAK,IAAI2C,EAAE,CAACxB,KAAK,IAAIwB,EAAE,CAACxB,KAAK,CAACnB,KAAK,CAAC,CAACE,YAAY;AAC1D,CAAC;AAED,OAAO,MAAM0C,kBAAkB,GAAGA,CAAC5C,KAAa,EAAEC,QAAgB,EAAE0C,EAAU,KAAc;EAC1F,MAAME,IAAI,GAAGF,EAAE,CAACxB,KAAK,CAACnB,KAAK,CAAC;EAC5B,OAAO6C,IAAI,IAAIA,IAAI,CAAC3C,YAAY,IAAI2C,IAAI,CAAC5C,QAAQ,KAAKA,QAAQ;AAChE,CAAC;AAGD,OAAO,MAAM6C,YAAY,GAAGA,CAAC9C,KAAa,EAAEC,QAAgB,EAAE0C,EAAU,EAAExC,SAAkB,EAAEC,QAAiB,KAAW;EACxHuC,EAAE,CAACxB,KAAK,CAACnB,KAAK,CAAC,GAAG;IAChBD,EAAE,EAAE,QAAQgD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IACxBhD,KAAK;IACLC,QAAQ;IACRC,YAAY,EAAE,IAAI;IAClBC,SAAS;IACTC;EACF,CAAC;EACDc,kBAAkB,CAACyB,EAAE,CAACxB,KAAK,CAAC;EAC5BP,OAAO,CAACC,GAAG,CAAC,kBAAkBb,KAAK,KAAKG,SAAS,IAAIC,QAAQ,qDAAqD,CAAC;AACrH,CAAC;AAED,OAAO,MAAM6C,kBAAkB,GAAGA,CAACjD,KAAa,EAAEkD,WAAmB,EAAEP,EAAU,KAAW;EAC1F,IAAIA,EAAE,CAACxB,KAAK,CAACnB,KAAK,CAAC,EAAE;IACnB2C,EAAE,CAACxB,KAAK,CAACnB,KAAK,CAAC,CAACC,QAAQ,GAAGiD,WAAW;IACtChC,kBAAkB,CAACyB,EAAE,CAACxB,KAAK,CAAC;IAC5BP,OAAO,CAACC,GAAG,CAAC,gBAAgBb,KAAK,4CAA4C,CAAC;EAChF;AACF,CAAC;AAED,OAAO,MAAMmD,eAAe,GAAGA,CAACnD,KAAa,EAAEoD,KAAa,EAAET,EAAU,KAAW;EACjF,IAAI,CAACA,EAAE,CAACxB,KAAK,CAACnB,KAAK,CAAC,EAAE;EACtB,MAAMqD,UAAU,GAAGD,KAAK,CAACE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAC7C,MAAMC,WAAW,GAAG1C,MAAM,CAACO,OAAO,CAACsB,EAAE,CAACxB,KAAK,CAAC,CAACsC,IAAI,CAAC,CAAC,CAACC,CAAC,EAAEb,IAAI,CAAC,KAAK;IAC/D,IAAIa,CAAC,KAAK1D,KAAK,EAAE,OAAO,KAAK;IAC7B,OAAO,CAAC6C,IAAI,CAACO,KAAK,IAAI,EAAE,EAAEG,WAAW,CAAC,CAAC,KAAKF,UAAU;EACxD,CAAC,CAAC;EACF,IAAIG,WAAW,EAAE;IACf,MAAM,IAAIG,KAAK,CAAC,sBAAsB,CAAC;EACzC;EACAhB,EAAE,CAACxB,KAAK,CAACnB,KAAK,CAAC,CAACoD,KAAK,GAAGA,KAAK;EAC7BlC,kBAAkB,CAACyB,EAAE,CAACxB,KAAK,CAAC;EAC5BP,OAAO,CAACC,GAAG,CAAC,gBAAgBb,KAAK,gBAAgBoD,KAAK,4BAA4B,CAAC;AACrF,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAIC,KAAa,IAAW;EAClDjD,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;EACfD,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;EACjED,OAAO,CAACC,GAAG,CAAC,mBAAmBgD,KAAK,EAAE,CAAC;EACvCjD,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;EACjED,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;EACfC,MAAM,CAACO,OAAO,CAACzB,WAAW,CAAC,CAAC0B,OAAO,CAAC,CAAC,CAACtB,KAAK,EAAE8D,IAAI,CAAC,KAAK;IACrDlD,OAAO,CAACC,GAAG,CAAC,MAAMb,KAAK,WAAW8D,IAAI,EAAE,CAAC;EAC3C,CAAC,CAAC;EACFlD,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;EACfD,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;EACzDD,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}