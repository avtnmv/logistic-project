{"ast":null,"code":"var _VerificationService;// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n/**\n * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n */export class VerificationService{// 10 –º–∏–Ω—É—Ç\nconstructor(){this.generatedCodes=new Map();this.CODE_EXPIRY_TIME=10*60*1000;}/**\n   * –ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (Singleton)\n   */static getInstance(){if(!VerificationService.instance){VerificationService.instance=new VerificationService();}return VerificationService.instance;}/**\n   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥\n   */generateVerificationCode(){return Math.floor(1000+Math.random()*9000).toString();}/**\n   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω\n   */async sendCode(params){try{// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥\nconst code=this.generateVerificationCode();// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π\nthis.generatedCodes.set(params.phone,{code,timestamp:Date.now()});// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ SMS\nreturn await this.sendSMSCode(params.phone,code,params.userName);}catch(error){console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:',error);return{success:false,message:'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'};}}/**\n   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ SMS (–∏–º–∏—Ç–∞—Ü–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)\n   */async sendSMSCode(phone,code,userName){// –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS\n// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS —Å–µ—Ä–≤–∏—Å–æ–º\n// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏\nconsole.log(\"\\uD83D\\uDCF1 SMS \\u043E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D \\u043D\\u0430 \".concat(phone,\": \\u041A\\u043E\\u0434 \\u043F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043D\\u0438\\u044F: \").concat(code));// –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏\nawait new Promise(resolve=>setTimeout(resolve,1000));return{success:true,message:\"\\u041A\\u043E\\u0434 \\u043F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043D\\u0438\\u044F \\u043E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D \\u043D\\u0430 \".concat(phone),code:code// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n};}/**\n   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n   */verifyCode(phone,inputCode){const storedData=this.generatedCodes.get(phone);if(!storedData){return{success:false,message:'–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'};}// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞\nif(Date.now()-storedData.timestamp>this.CODE_EXPIRY_TIME){this.generatedCodes.delete(phone);return{success:false,message:'–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'};}// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞\nif(storedData.code===inputCode){// –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥\nthis.generatedCodes.delete(phone);return{success:true,message:'–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!'};}else{return{success:false,message:'–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'};}}/**\n   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n   */hasActiveCode(phone){const storedData=this.generatedCodes.get(phone);if(!storedData)return false;return Date.now()-storedData.timestamp<=this.CODE_EXPIRY_TIME;}/**\n   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã\n   */cleanupExpiredCodes(){const now=Date.now();this.generatedCodes.forEach((data,phone)=>{if(now-data.timestamp>this.CODE_EXPIRY_TIME){this.generatedCodes.delete(phone);}});}/**\n   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤\n   */getActiveCodesCount(){this.cleanupExpiredCodes();return this.generatedCodes.size;}/**\n   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)\n   */getCodeForTesting(phone){const storedData=this.generatedCodes.get(phone);if(storedData&&Date.now()-storedData.timestamp<=this.CODE_EXPIRY_TIME){return storedData.code;}return null;}}// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞\n_VerificationService=VerificationService;VerificationService.instance=void 0;export const verificationService=VerificationService.getInstance();","map":{"version":3,"names":["VerificationService","constructor","generatedCodes","Map","CODE_EXPIRY_TIME","getInstance","instance","generateVerificationCode","Math","floor","random","toString","sendCode","params","code","set","phone","timestamp","Date","now","sendSMSCode","userName","error","console","success","message","log","concat","Promise","resolve","setTimeout","verifyCode","inputCode","storedData","get","delete","hasActiveCode","cleanupExpiredCodes","forEach","data","getActiveCodesCount","size","getCodeForTesting","_VerificationService","verificationService"],"sources":["/Users/avtnmv/Documents/Front-End/logistics-project-react/src/services/verificationService.ts"],"sourcesContent":["// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\nexport interface VerificationResult {\n  success: boolean;\n  message: string;\n  code?: string;\n}\n\n// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\nexport interface VerificationParams {\n  phone: string;\n  userName?: string;\n}\n\n/**\n * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n */\nexport class VerificationService {\n  private static instance: VerificationService;\n  private generatedCodes: Map<string, { code: string; timestamp: number }> = new Map();\n  private readonly CODE_EXPIRY_TIME = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç\n\n  private constructor() {}\n\n  /**\n   * –ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (Singleton)\n   */\n  public static getInstance(): VerificationService {\n    if (!VerificationService.instance) {\n      VerificationService.instance = new VerificationService();\n    }\n    return VerificationService.instance;\n  }\n\n  /**\n   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥\n   */\n  private generateVerificationCode(): string {\n    return Math.floor(1000 + Math.random() * 9000).toString();\n  }\n\n  /**\n   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω\n   */\n  public async sendCode(params: VerificationParams): Promise<VerificationResult> {\n    try {\n      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥\n      const code = this.generateVerificationCode();\n      \n      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π\n      this.generatedCodes.set(params.phone, {\n        code,\n        timestamp: Date.now()\n      });\n\n      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ SMS\n      return await this.sendSMSCode(params.phone, code, params.userName);\n\n    } catch (error) {\n      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error);\n      return {\n        success: false,\n        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'\n      };\n    }\n  }\n\n  /**\n   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ SMS (–∏–º–∏—Ç–∞—Ü–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)\n   */\n  private async sendSMSCode(\n    phone: string, \n    code: string, \n    userName?: string\n  ): Promise<VerificationResult> {\n    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS\n    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS —Å–µ—Ä–≤–∏—Å–æ–º\n    \n    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏\n    console.log(`üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`);\n    \n    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return {\n      success: true,\n      message: `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}`,\n      code: code // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n    };\n  }\n\n  /**\n   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n   */\n  public verifyCode(phone: string, inputCode: string): VerificationResult {\n    const storedData = this.generatedCodes.get(phone);\n    \n    if (!storedData) {\n      return {\n        success: false,\n        message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'\n      };\n    }\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞\n    if (Date.now() - storedData.timestamp > this.CODE_EXPIRY_TIME) {\n      this.generatedCodes.delete(phone);\n      return {\n        success: false,\n        message: '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'\n      };\n    }\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞\n    if (storedData.code === inputCode) {\n      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥\n      this.generatedCodes.delete(phone);\n      return {\n        success: true,\n        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!'\n      };\n    } else {\n      return {\n        success: false,\n        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'\n      };\n    }\n  }\n\n  /**\n   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n   */\n  public hasActiveCode(phone: string): boolean {\n    const storedData = this.generatedCodes.get(phone);\n    if (!storedData) return false;\n    \n    return Date.now() - storedData.timestamp <= this.CODE_EXPIRY_TIME;\n  }\n\n  /**\n   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã\n   */\n  public cleanupExpiredCodes(): void {\n    const now = Date.now();\n    this.generatedCodes.forEach((data, phone) => {\n      if (now - data.timestamp > this.CODE_EXPIRY_TIME) {\n        this.generatedCodes.delete(phone);\n      }\n    });\n  }\n\n  /**\n   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤\n   */\n  public getActiveCodesCount(): number {\n    this.cleanupExpiredCodes();\n    return this.generatedCodes.size;\n  }\n\n  /**\n   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)\n   */\n  public getCodeForTesting(phone: string): string | null {\n    const storedData = this.generatedCodes.get(phone);\n    if (storedData && Date.now() - storedData.timestamp <= this.CODE_EXPIRY_TIME) {\n      return storedData.code;\n    }\n    return null;\n  }\n}\n\n// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞\nexport const verificationService = VerificationService.getInstance();\n"],"mappings":"yBAAA;AAOA;AAMA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,mBAAoB,CAGqB;AAE5CC,WAAWA,CAAA,CAAG,MAHdC,cAAc,CAAqD,GAAI,CAAAC,GAAG,CAAC,CAAC,MACnEC,gBAAgB,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAE3B,CAEvB;AACF;AACA,KACE,MAAc,CAAAC,WAAWA,CAAA,CAAwB,CAC/C,GAAI,CAACL,mBAAmB,CAACM,QAAQ,CAAE,CACjCN,mBAAmB,CAACM,QAAQ,CAAG,GAAI,CAAAN,mBAAmB,CAAC,CAAC,CAC1D,CACA,MAAO,CAAAA,mBAAmB,CAACM,QAAQ,CACrC,CAEA;AACF;AACA,KACUC,wBAAwBA,CAAA,CAAW,CACzC,MAAO,CAAAC,IAAI,CAACC,KAAK,CAAC,IAAI,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,IAAI,CAAC,CAACC,QAAQ,CAAC,CAAC,CAC3D,CAEA;AACF;AACA,KACE,KAAa,CAAAC,QAAQA,CAACC,MAA0B,CAA+B,CAC7E,GAAI,CACF;AACA,KAAM,CAAAC,IAAI,CAAG,IAAI,CAACP,wBAAwB,CAAC,CAAC,CAE5C;AACA,IAAI,CAACL,cAAc,CAACa,GAAG,CAACF,MAAM,CAACG,KAAK,CAAE,CACpCF,IAAI,CACJG,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CACtB,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,KAAI,CAACC,WAAW,CAACP,MAAM,CAACG,KAAK,CAAEF,IAAI,CAAED,MAAM,CAACQ,QAAQ,CAAC,CAEpE,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,MAAO,CACLE,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,+CACX,CAAC,CACH,CACF,CAEA;AACF;AACA,KACE,KAAc,CAAAL,WAAWA,CACvBJ,KAAa,CACbF,IAAY,CACZO,QAAiB,CACY,CAC7B;AACA;AAEA;AACAE,OAAO,CAACG,GAAG,yFAAAC,MAAA,CAAwBX,KAAK,0GAAAW,MAAA,CAAwBb,IAAI,CAAE,CAAC,CAEvE;AACA,KAAM,IAAI,CAAAc,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD,MAAO,CACLL,OAAO,CAAE,IAAI,CACbC,OAAO,0KAAAE,MAAA,CAAoCX,KAAK,CAAE,CAClDF,IAAI,CAAEA,IAAK;AACb,CAAC,CACH,CAEA;AACF;AACA,KACSiB,UAAUA,CAACf,KAAa,CAAEgB,SAAiB,CAAsB,CACtE,KAAM,CAAAC,UAAU,CAAG,IAAI,CAAC/B,cAAc,CAACgC,GAAG,CAAClB,KAAK,CAAC,CAEjD,GAAI,CAACiB,UAAU,CAAE,CACf,MAAO,CACLT,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,qCACX,CAAC,CACH,CAEA;AACA,GAAIP,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGc,UAAU,CAAChB,SAAS,CAAG,IAAI,CAACb,gBAAgB,CAAE,CAC7D,IAAI,CAACF,cAAc,CAACiC,MAAM,CAACnB,KAAK,CAAC,CACjC,MAAO,CACLQ,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,iCACX,CAAC,CACH,CAEA;AACA,GAAIQ,UAAU,CAACnB,IAAI,GAAKkB,SAAS,CAAE,CACjC;AACA,IAAI,CAAC9B,cAAc,CAACiC,MAAM,CAACnB,KAAK,CAAC,CACjC,MAAO,CACLQ,OAAO,CAAE,IAAI,CACbC,OAAO,CAAE,0BACX,CAAC,CACH,CAAC,IAAM,CACL,MAAO,CACLD,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,mCACX,CAAC,CACH,CACF,CAEA;AACF;AACA,KACSW,aAAaA,CAACpB,KAAa,CAAW,CAC3C,KAAM,CAAAiB,UAAU,CAAG,IAAI,CAAC/B,cAAc,CAACgC,GAAG,CAAClB,KAAK,CAAC,CACjD,GAAI,CAACiB,UAAU,CAAE,MAAO,MAAK,CAE7B,MAAO,CAAAf,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGc,UAAU,CAAChB,SAAS,EAAI,IAAI,CAACb,gBAAgB,CACnE,CAEA;AACF;AACA,KACSiC,mBAAmBA,CAAA,CAAS,CACjC,KAAM,CAAAlB,GAAG,CAAGD,IAAI,CAACC,GAAG,CAAC,CAAC,CACtB,IAAI,CAACjB,cAAc,CAACoC,OAAO,CAAC,CAACC,IAAI,CAAEvB,KAAK,GAAK,CAC3C,GAAIG,GAAG,CAAGoB,IAAI,CAACtB,SAAS,CAAG,IAAI,CAACb,gBAAgB,CAAE,CAChD,IAAI,CAACF,cAAc,CAACiC,MAAM,CAACnB,KAAK,CAAC,CACnC,CACF,CAAC,CAAC,CACJ,CAEA;AACF;AACA,KACSwB,mBAAmBA,CAAA,CAAW,CACnC,IAAI,CAACH,mBAAmB,CAAC,CAAC,CAC1B,MAAO,KAAI,CAACnC,cAAc,CAACuC,IAAI,CACjC,CAEA;AACF;AACA,KACSC,iBAAiBA,CAAC1B,KAAa,CAAiB,CACrD,KAAM,CAAAiB,UAAU,CAAG,IAAI,CAAC/B,cAAc,CAACgC,GAAG,CAAClB,KAAK,CAAC,CACjD,GAAIiB,UAAU,EAAIf,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGc,UAAU,CAAChB,SAAS,EAAI,IAAI,CAACb,gBAAgB,CAAE,CAC5E,MAAO,CAAA6B,UAAU,CAACnB,IAAI,CACxB,CACA,MAAO,KAAI,CACb,CACF,CAEA;AAAA6B,oBAAA,CA1Ja3C,mBAAmB,CAAnBA,mBAAmB,CACfM,QAAQ,QA0JzB,MAAO,MAAM,CAAAsC,mBAAmB,CAAG5C,mBAAmB,CAACK,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}