{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getGlobalTestDB } from '../data/testData';\nexport const useCurrentUser = () => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  useEffect(() => {\n    // Проверяем флаг полной очистки\n    const clearedAll = localStorage.getItem('CLEARED_ALL_DATA');\n    if (clearedAll === 'true') {\n      setCurrentUser(null);\n      return;\n    }\n\n    // Получаем данные пользователя из localStorage\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n\n        // Если у пользователя нет ID, пытаемся найти его в базе данных\n        if (!userData.id) {\n          const testDB = getGlobalTestDB();\n          const dbUser = testDB.users[userData.phone];\n          if (dbUser && dbUser.id) {\n            // Используем ID из базы данных\n            const updatedUserData = {\n              ...userData,\n              id: dbUser.id\n            };\n\n            // Обновляем в localStorage\n            localStorage.setItem('currentUser', JSON.stringify(updatedUserData));\n            setCurrentUser(updatedUserData);\n          } else {\n            // Создаем новый ID только если пользователя нет в базе\n            const updatedUserData = {\n              ...userData,\n              id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n            };\n\n            // Обновляем в localStorage\n            localStorage.setItem('currentUser', JSON.stringify(updatedUserData));\n            setCurrentUser(updatedUserData);\n          }\n        } else {\n          setCurrentUser(userData);\n        }\n      } catch (error) {\n        console.warn('Ошибка парсинга данных пользователя:', error);\n      }\n    }\n  }, []);\n  return currentUser;\n};\n_s(useCurrentUser, \"Y5F2pQQk2LZA5WRO2+bvRm5iRuo=\");","map":{"version":3,"names":["useState","useEffect","getGlobalTestDB","useCurrentUser","_s","currentUser","setCurrentUser","clearedAll","localStorage","getItem","storedUser","userData","JSON","parse","id","testDB","dbUser","users","phone","updatedUserData","setItem","stringify","Date","now","Math","random","toString","substr","error","console","warn"],"sources":["/Users/avtnmv/Documents/Front-End/logistics-project-react — копия/src/hooks/useCurrentUser.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getGlobalTestDB } from '../data/testData';\n\nexport interface CurrentUser {\n  id: string;\n  phone: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n}\n\nexport const useCurrentUser = (): CurrentUser | null => {\n  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);\n\n  useEffect(() => {\n    // Проверяем флаг полной очистки\n    const clearedAll = localStorage.getItem('CLEARED_ALL_DATA');\n    if (clearedAll === 'true') {\n      setCurrentUser(null);\n      return;\n    }\n    \n    // Получаем данные пользователя из localStorage\n    const storedUser = localStorage.getItem('currentUser');\n    \n    if (storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        \n        // Если у пользователя нет ID, пытаемся найти его в базе данных\n        if (!userData.id) {\n          const testDB = getGlobalTestDB();\n          const dbUser = testDB.users[userData.phone];\n          \n          if (dbUser && dbUser.id) {\n            // Используем ID из базы данных\n            const updatedUserData = {\n              ...userData,\n              id: dbUser.id\n            };\n            \n            // Обновляем в localStorage\n            localStorage.setItem('currentUser', JSON.stringify(updatedUserData));\n            setCurrentUser(updatedUserData);\n          } else {\n            // Создаем новый ID только если пользователя нет в базе\n            const updatedUserData = {\n              ...userData,\n              id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n            };\n            \n            // Обновляем в localStorage\n            localStorage.setItem('currentUser', JSON.stringify(updatedUserData));\n            setCurrentUser(updatedUserData);\n          }\n        } else {\n          setCurrentUser(userData);\n        }\n      } catch (error) {\n        console.warn('Ошибка парсинга данных пользователя:', error);\n      }\n    }\n  }, []);\n\n  return currentUser;\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,eAAe,QAAQ,kBAAkB;AAUlD,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAA0B;EAAAC,EAAA;EACtD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAqB,IAAI,CAAC;EAExEC,SAAS,CAAC,MAAM;IACd;IACA,MAAMM,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAC3D,IAAIF,UAAU,KAAK,MAAM,EAAE;MACzBD,cAAc,CAAC,IAAI,CAAC;MACpB;IACF;;IAEA;IACA,MAAMI,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAEtD,IAAIC,UAAU,EAAE;MACd,IAAI;QACF,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC;;QAEvC;QACA,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAMC,MAAM,GAAGb,eAAe,CAAC,CAAC;UAChC,MAAMc,MAAM,GAAGD,MAAM,CAACE,KAAK,CAACN,QAAQ,CAACO,KAAK,CAAC;UAE3C,IAAIF,MAAM,IAAIA,MAAM,CAACF,EAAE,EAAE;YACvB;YACA,MAAMK,eAAe,GAAG;cACtB,GAAGR,QAAQ;cACXG,EAAE,EAAEE,MAAM,CAACF;YACb,CAAC;;YAED;YACAN,YAAY,CAACY,OAAO,CAAC,aAAa,EAAER,IAAI,CAACS,SAAS,CAACF,eAAe,CAAC,CAAC;YACpEb,cAAc,CAACa,eAAe,CAAC;UACjC,CAAC,MAAM;YACL;YACA,MAAMA,eAAe,GAAG;cACtB,GAAGR,QAAQ;cACXG,EAAE,EAAE,QAAQQ,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACnE,CAAC;;YAED;YACAnB,YAAY,CAACY,OAAO,CAAC,aAAa,EAAER,IAAI,CAACS,SAAS,CAACF,eAAe,CAAC,CAAC;YACpEb,cAAc,CAACa,eAAe,CAAC;UACjC;QACF,CAAC,MAAM;UACLb,cAAc,CAACK,QAAQ,CAAC;QAC1B;MACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACC,IAAI,CAAC,sCAAsC,EAAEF,KAAK,CAAC;MAC7D;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOvB,WAAW;AACpB,CAAC;AAACD,EAAA,CAtDWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}